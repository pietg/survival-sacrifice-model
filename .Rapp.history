rm(list=ls())#
library(Rcpp)#
sourceCpp("surv_sacr.cpp")#
#
A<-read.table("RFM109.txt")#
output <- Compute_estimates(A)#
#
B <- output$MLE1#
C <- output$MLE2#
#
  x<-B[,1]#
   y<-B[,2]#
   x1<-C[,1]	#
   y1<-C[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
   lines(x,y,lwd=1,col="blue",type='s')#
   lines(x1,y1,lwd=1,col="red",type='S')
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("surv_sacr.cpp")#
#
	A<-read.table("RFM109.txt")#
	output <- Compute_estimates(A)#
#
	B <- output$MLE1#
	C <- output$MLE2#
#
	x<-B[,1]#
	y<-B[,2]#
	x1<-C[,1]	#
	y1<-C[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
	lines(x,1-y,lwd=1,col="blue",type='s')#
	lines(x1,1-y1,lwd=1,col="red",type='s')
B
C
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("surv_sacr.cpp")#
#
	A<-read.table("RFM109.txt")#
	output <- Compute_estimates(A)#
#
	B <- output$MLE1#
	C <- output$MLE2#
#
	x<-B[,1]#
	y<-B[,2]#
	x1<-C[,1]	#
	y1<-C[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
	lines(x,y,lwd=1,col="blue",type='s')#
	lines(x1,y1,lwd=1,col="red",type='s')
B<-read.table("MLE1.txt")#
   C<-read.table("MLE2.txt")#
   x<-B[,1]#
   y<-B[,2]#
   x1<-C[,1]	#
   y1<-C[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
   lines(x,y,lwd=1,col="blue",type='s')#
   lines(x1,y1,lwd=1,col="red",type='s')
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("surv_sacr.cpp")#
	sourceCpp("EM.cpp")#
#
	A<-read.table("RFM109.txt")#
	#output <- Compute_estimates(A)#
	output <- EM(A)#
#
	B <- output$MLE1#
	C <- output$MLE2#
#
	x<-B[,1]#
	y<-B[,2]#
	x1<-C[,1]	#
	y1<-C[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
	lines(x,y,lwd=1,col="blue",type='s')#
	lines(x1,y1,lwd=1,col="red",type='s')
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("primal_dual.cpp")#
	sourceCpp("EM.cpp")#
#
	A<-read.table("RFM109.txt")#
	output1 <- primal_dual(A)#
	output2 <- EM(A)#
#
	B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=1,col="blue",type='s')#
	lines(x1,y1,lwd=1,col="red",type='s')#
	lines(t,u,lwd=1, lty=2,type='s')#
	lines(t1,u1,lwd=1, lty=2,type='s')
lines(t,u,lwd=2, lty=2,type='s')#
	lines(t1,u1,lwd=2, lty=2,type='s')
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("primal_dual.cpp")#
	sourceCpp("EM.cpp")#
#
	A<-read.table("RFM109.txt")#
	output1 <- primal_dual(A)#
	output2 <- EM(A)#
#
	B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=2, lty=2,type='s')#
	lines(t1,u1,lwd=2, lty=2,type='s')
lines(t,u,lwd=2, lty=2,type='s')#
	lines(t1,u1,lwd=2, lty=3,type='s')
lines(t,u,lwd=2, lty=3,type='s')#
	lines(t1,u1,lwd=2, lty=3,type='s')
lines(t,u,lwd=2, lty=4,type='s')#
	lines(t1,u1,lwd=2, lty=4,type='s')
lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=2, lty=1,type='s')#
	lines(t1,u1,lwd=2, lty=1,type='s')
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("primal_dual.cpp")#
	sourceCpp("EM.cpp")#
#
	A<-read.table("RFM109.txt")#
	output1 <- primal_dual(A)#
	output2 <- EM(A)#
#
	B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')
output1
output1$loglikelihood
output2$loglikelihood
lines(t,u,lwd=2, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=2, lty=1,col="red"type='s')
B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="blue",type='s')#
	#lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=2, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=2, lty=1,col="red"type='s')
A<-read.table("RFM109.txt")#
	output1 <- primal_dual(A)#
	output2 <- EM(A)#
#
	B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="blue",type='s')#
	#lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=2, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=2, lty=1,col="red"type='s')
lines(t,u,lwd=2, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=2, lty=1,col="red",type='s')
lines(t,u,lwd=1, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=1, lty=1,col="red",type='s')
B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="blue",type='s')#
	#lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=1, lty=1,col="blue",type='s')#
	lines(t1,u1,lwd=1, lty=1,col="red",type='s')
lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')
B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')
lines(t,u,lwd=2, lty=1,type='s')#
	lines(t1,u1,lwd=2, lty=1,type='s')
rm(list=ls())#
library(Rcpp)#
sourceCpp("primal_dual.cpp")#
NumIt <-1000#
n <- 1000#
#
meanMat <- matrix(0, nrow= NumIt, ncol= 2)#
timeMat <- matrix(0, nrow= NumIt, ncol= 1)#
colnames(meanMat) <- c("mean1", "mean2")#
colnames(timeMat) <- "IP"#
#
t<-rep(NA,n)#
delta1<-rep(NA,n)#
delta2<-rep(NA,n)#
#
for (j in 1: NumIt)#
{	#
  sim = 101+j#
  set.seed(sim)#
  print(j)#
  ## Data generation  #
  for(i in (1:n))#
  {#
  	x<-rexp(1,rate=0.5)#
  	y<-rexp(1)+x#
  	t[i]<-rexp(1,rate=0.4)#
  	if ((x>t[i]) && (y>t[i]))#
	  {#
		  delta1[i]=0;#
		  delta2[i]=0;#
	  }#
	  else#
	  {#
		  if ((x<=t[i]) && (y>t[i]))#
		  {#
			  delta1[i]=1;#
			  delta2[i]=0;#
		  }#
		  else#
		  {#
			  delta1[i]=1;#
			  delta2[i]=1;#
			  t[i]=y;#
		  }#
	  }#
  }#
  A = matrix(c(t,delta1,delta2),n,3, byrow = FALSE)#
#
  ### Estimation#
  ############################################
  starter_IP = proc.time()#
  IP <- primal_dual(A)#
  mean_IP = IP$mean#
  time_IP = (proc.time() -starter_IP)[3]#
 meanMat[j,] <- mean_IP#
 timeMat[j,] <- time_IP#
  write(c(mean_IP,time_IP),file = "primal_dual_results_means.txt",ncol =3,append = TRUE)#
  ############################################
#
}#
#
pdf("BoxPlot_alpha_err_and_time.pdf")#
boxplot(meanMat, main= "Boxplot of means", las=2)#
boxplot(timeMat, main="Run Times", las=2) #
dev.off()
rm(list=ls())#
library(Rcpp)#
sourceCpp("primal_dual.cpp")#
NumIt <-1000#
n <- 1000#
#
meanMat <- matrix(0, nrow= NumIt, ncol= 2)#
timeMat <- matrix(0, nrow= NumIt, ncol= 1)#
colnames(meanMat) <- c("mean1", "mean2")#
colnames(timeMat) <- "IP"#
#
t<-rep(NA,n)#
delta1<-rep(NA,n)#
delta2<-rep(NA,n)#
#
for (j in 1: NumIt)#
{	#
  sim = 101+j#
  set.seed(sim)#
  print(j)#
  ## Data generation  #
  for(i in (1:n))#
  {#
  	x<-rexp(1,rate=0.5)#
  	y<-rexp(1)+x#
  	t[i]<-rexp(1,rate=0.4)#
  	if ((x>t[i]) && (y>t[i]))#
	  {#
		  delta1[i]=0;#
		  delta2[i]=0;#
	  }#
	  else#
	  {#
		  if ((x<=t[i]) && (y>t[i]))#
		  {#
			  delta1[i]=1;#
			  delta2[i]=0;#
		  }#
		  else#
		  {#
			  delta1[i]=1;#
			  delta2[i]=1;#
			  t[i]=y;#
		  }#
	  }#
  }#
  A = matrix(c(t,delta1,delta2),n,3, byrow = FALSE)#
#
  ### Estimation#
  ############################################
  starter_IP = proc.time()#
  IP <- primal_dual(A)#
  mean_IP = IP$mean#
  time_IP = (proc.time() -starter_IP)[3]#
 meanMat[j,] <- mean_IP#
 timeMat[j,] <- time_IP#
  write(c(mean_IP,time_IP),file = "primal_dual_results_means.txt",ncol =3,append = TRUE)#
  ############################################
#
}#
#
pdf("BoxPlot_means_and_time.pdf")#
boxplot(meanMat, main= "Boxplot of means", las=2)#
boxplot(timeMat, main="Run Times", las=2) #
dev.off()
rm(list=ls())#
	library(Rcpp)#
	sourceCpp("primal_dual.cpp")#
	sourceCpp("EM.cpp")#
#
	A<-read.table("RFM109.txt")#
	output1 <- primal_dual(A)#
	output2 <- EM(A)#
#
	B1 <- output1$MLE1#
	C1 <- output1$MLE2#
	B2 <- output2$MLE1#
	C2 <- output2$MLE2#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(min(x,x1),max(x,x1)),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="blue",type='s')#
	lines(x1,y1,lwd=2,col="red",type='s')#
	lines(t,u,lwd=2, lty=1,type='s')#
	lines(t1,u1,lwd=2, lty=1,type='s')
